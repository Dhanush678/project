C51 COMPILER V9.53.0.0   GARAGE_DOOR                                                       03/12/2018 09:37:31 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE GARAGE_DOOR
OBJECT MODULE PLACED IN garage_door.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE garage_door.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          #define lcd P2
   3          
   4          //functions' declaration
   5          void controller_init();
   6          void lcd_init();
   7          void character(unsigned char);
   8          void cmd(unsigned char);
   9          void string(unsigned char *);
  10          void delay(int);
  11          
  12          void check_and_open();
  13          void check_and_close();
  14            
  15          // Motor Driver IC Input pins
  16          sbit in1=P1^0;
  17          sbit in2=P1^1;   
  18          
  19          // lcd control pins
  20          sbit rs=P1^6;
  21          sbit en=P1^7;
  22          
  23          unsigned char m=3;
  24          int d, password_digit1, password_digit2, password_digit3, password_digit4, flag=0, end_star, end_hash;
  25          
  26          void main()
  27          {
  28   1        controller_init();
  29   1        lcd_init();
  30   1        string("PASSWD PROTECTED");
  31   1        cmd(0xc0);
  32   1        string("   GARAGE DOOR");
  33   1        delay(2000);
  34   1        
  35   1        while(1)  // Execute the following commands infinitely(continueously)
  36   1        {
  37   2          if((P3 & 0x0f) == 11)   // if * is pressed to open the door
  38   2          {
  39   3            check_and_open();              // call this function to check the code and open the door
  40   3          }
  41   2      
  42   2          if((P3 & 0x0f) == 12)   // if # is pressed to close the door
  43   2          {
  44   3            check_and_close();           // call this function to check the code and open the door
  45   3          }   
  46   2        } 
  47   1      }
  48          
  49          void check_and_open()
  50          {
  51   1        while((P3 & 0x0f) == 11);
  52   1        
  53   1        password_digit1=(P3 & 0x0f);      // store first digit of password
  54   1        while((P3 & 0x0f) == 1);      // wait till the next digit is pressed
  55   1        
C51 COMPILER V9.53.0.0   GARAGE_DOOR                                                       03/12/2018 09:37:31 PAGE 2   

  56   1        password_digit2=(P3 & 0x0f);      // store second digit of password
  57   1        while((P3 & 0x0f) == 2);
  58   1        
  59   1        password_digit3=(P3 & 0x0f);      // store third digit of password
  60   1        while((P3 & 0x0f) == 3);
  61   1        
  62   1        password_digit4=(P3 & 0x0f);      // store second digit of password
  63   1        while((P3 & 0x0f) == 4);
  64   1        
  65   1        end_star=(P3 & 0x0f);
  66   1        
  67   1        if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && end_st
             -ar == 11 && flag == 0)  
  68   1        {
  69   2          cmd(0x01);
  70   2          cmd(0x80);
  71   2          string("    OPENING");
  72   2          cmd(0xc0);
  73   2          string("THE GARAGE DOOR");
  74   2          in1=1; in2=0;  // starting motor anti-clockwise
  75   2          delay(3000);  //open the door shutter for 5 sec and then close
  76   2          in1=in2=0;      // stop the motor
  77   2          cmd(0x01);
  78   2          string("  DOOR OPENED!");
  79   2          delay(3000);
  80   2          flag = 1;     // remember that the door is open, do not reopen it   
  81   2        } 
  82   1        else if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && e
             -nd_star == 11 && flag == 1)
  83   1        {
  84   2          cmd(0x01);
  85   2          cmd(0x80);
  86   2          string("DOOR IS ");
  87   2          cmd(0xc0);
  88   2          string("ALREADY OPENED!");
  89   2          delay(3000);
  90   2        } 
  91   1      }
  92          
  93          void check_and_close()
  94          {
  95   1        while((P3 & 0x0f) == 12);
  96   1        
  97   1        password_digit1=(P3 & 0x0f);      // store first digit of password
  98   1        while((P3 & 0x0f) == 1);      // wait till the next digit is pressed
  99   1        
 100   1        password_digit2=(P3 & 0x0f);      // store second digit of password
 101   1        while((P3 & 0x0f) == 2);
 102   1        
 103   1        password_digit3=(P3 & 0x0f);      // store third digit of password
 104   1        while((P3 & 0x0f) == 3);
 105   1        
 106   1        password_digit4=(P3 & 0x0f);      // store second digit of password
 107   1        while((P3 & 0x0f) == 4);
 108   1        
 109   1        end_hash=(P3 & 0x0f);
 110   1        
 111   1        if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && end_ha
             -sh == 12 && flag == 1)
 112   1        { 
 113   2          cmd(0x01);
 114   2          cmd(0x80);
C51 COMPILER V9.53.0.0   GARAGE_DOOR                                                       03/12/2018 09:37:31 PAGE 3   

 115   2          string("    CLOSING");
 116   2          cmd(0xc0);
 117   2          string("THE GARAGE DOOR");
 118   2          in1=0; in2=1;     // starting motor clockwise
 119   2          delay(3000);      // close the door shutter in 5 sec and then stop the motor
 120   2          in1=in2=0;        // stop the motor
 121   2          cmd(0x01);
 122   2          string("  DOOR CLOSED!");
 123   2          delay(3000);
 124   2          flag = 0; 
 125   2        }
 126   1        else if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && e
             -nd_hash == 12 && flag == 0)
 127   1        {
 128   2          cmd(0x01);
 129   2          cmd(0x80);
 130   2          string("DOOR IS");
 131   2          cmd(0xc0);
 132   2          string("ALREADY CLOSED!");
 133   2          delay(3000);
 134   2        }
 135   1      }
 136          
 137          //---------------microcontroller initialzation-----------//
 138          void controller_init()
 139          {
 140   1        lcd=0x00;    // make lcd connected pins as output
 141   1        rs=0;
 142   1        en=0;
 143   1        in1=in2=0;  // make motor driver ic pins as output
 144   1        P3 = 0xff;  // make dtmf module pins as inputs
 145   1      }
 146          
 147          //--------------------------LCD Code-------------------//
 148          void lcd_init()
 149          {
 150   1        cmd(0x01);     //clear the screen 
 151   1        cmd(0x38);     //8-bit mode with 5*7 matrix
 152   1        cmd(0x0c);     //display on with cursor =>(0ch=curson off; 0fh=cursor blinking; 0eh=curson on)  
 153   1        cmd(0x06);     //shift cursor =>(06h right--> ; 04h <---left; default=right--->)
 154   1        cmd(0x80);     //position =>(80=1st row 1st position; c0=2nd row 1st position)
 155   1      }
 156          
 157          void cmd(unsigned char ch)
 158          {
 159   1        lcd=ch;
 160   1        rs=0;
 161   1        en=1;
 162   1        delay(2);
 163   1        en=0;
 164   1      }
 165          
 166          void character(unsigned char ch)
 167          {
 168   1        lcd=ch;
 169   1        rs=1;
 170   1        en=1;
 171   1        delay(2);
 172   1        en=0;
 173   1      }
 174          
 175          void string(unsigned char *p)
C51 COMPILER V9.53.0.0   GARAGE_DOOR                                                       03/12/2018 09:37:31 PAGE 4   

 176          {
 177   1        while(*p)
 178   1        character(*p++);
 179   1      }
 180          //-----------------------End of LCD Code------------------------//  
 181          
 182          void delay(int d)
 183          {
 184   1        unsigned char i;
 185   1        for(;d>0;d--)
 186   1        {
 187   2          for(i=250;i>0;i--);   //500usec
 188   2          for(i=250;i>0;i--);   //500usec
 189   2        }
 190   1      }
 191          
 192          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    755    ----
   CONSTANT SIZE    =    151    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
